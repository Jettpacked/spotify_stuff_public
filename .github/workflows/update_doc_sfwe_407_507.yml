# This is a basic workflow to help you get started with Actions

name: update_documentation

# Controls when the workflow will run
on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
  schedule:
    - cron: '*/30 * * * *'
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Run_update_documentation:
    runs-on: ubuntu-latest

    steps:

    # Step 1: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    # Step 2: checkout SFWE407-507 Repo
    - name: Checkout another repository
      uses: actions/checkout@v4
      with:
        repository: "Sprint-Masters1/SFWE407-507"
        token: ${{ secrets.MY_GITHUB_PAT }}
        path: ""
        
    # Step 3: Install Dependencies
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
     # Step 4a: Run command to update code links
    - name: Run python code links
      working-directory: ./
      run: |
        pip install setuptools
        python tools/links/code_links.py
        
        
     # Step 4: Run command to update rst files
    - name: Run Update rst files
      working-directory: documentation/sphinx_documentation
      
      run: 
        sphinx-apidoc -o source ../../software/SprintMastersPDMS/kanban_board
        
    # Step 5: Run command to update documentation
    - name: Update Documentation
      working-directory: documentation/sphinx_documentation/source
      
      run: 
        sphinx-build -b html . ../build/html
        
    # Step 6: Git Config
    - name: Git Config
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
      

    # Step 6: Stash all changes
    - name: Stash all changes
      run: |
        if git status --porcelain | grep -q .; then
          git stash --all
          echo "Changes stashed."
        else
          echo "No changes to stash, skipping git stash."
        fi

    # Step 7: Pull latest changes from remote
    - name: Pull latest changes from remote
      run: git pull origin develop
      
    # Step 8: Unstash all changes
    - name: Unstash all changes
      run: |
        if git stash list | grep -q 'stash@{0}'; then
          git stash pop
          echo "Stashed changes applied."
        else
          echo "No stashed changes found, skipping git stash pop."
        fi
    
    # Step 9: Commit
    - name: git add changes to specific files
      run: git add -A documentation/sphinx_documentation/build/html software/requirements
        
    # Step 10: check for adds and push if commit exists
    - name: Check for git adds
      run: |
        staged_files=$(git diff --cached --name-only)
        if [ -z "$staged_files" ]; then
          echo "No files staged for commit."
        else
          echo "There are files staged for commit"
          git commit -m "SFWE407-507 #25 Update files from github action to update documentation and code_links"
        fi

    # Step 11: Push changes to remote repository
    - name: Push changes
      run: git push origin develop
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
